Question #1:
#1. Write a query to return columns id and extra from table SLEEP .

SELECT id,extra
FROM SLEEP;

#2. Rewrite the previous query so that extra will appear as the first column in your query result.

SELECT extra,id
FROM SLEEP;

#3. Write a query to return all the category values, without repetitions.

SELECT DISTINCT category
FROM SLEEP;

#4. Write a query to return every id whose extra > 0 .

SELECT id
FROM SLEEP
where extra>0;

#5. Write a query to return the total of extra in each category (call it extraSum ) and
the number of records in each category (call it categoryNum) .

SELECT category,SUM(extra) AS extraSum,COUNT(category)AS categoryNum
FROM SLEEP
GROUP BY category ;

#6. Write a query to return the average extra of each category (call it mean_extra ).

SELECT category,AVG(extra) AS mean_extra
FROM SLEEP
GROUP BY category;

Question #2

#1. Select the first two rows in table Department .

SELECT *
FROM Department
LIMIT 2;

#2. Write a query to return the employeename , hiredate , b asewage from table Employee .

SELECT employeename,hiredate,basewage
FROM Employee;

#3. Write a query to return the total wage of employees.

SELECT SUM(basewage*wagelevel)
FROM Employee;

#4Write a query to return names of employees whose basewage ranges from 2000 to 3000, sort the result by basewage in descending order. (Look up online how to use ORDER BY to sort descending.)

SELECT Employeename
FROM Employee
WHERE BaseWage >=2000 && BaseWage<=3000
ORDER BY BaseWage DESC;

#5Write a query to return the employeename , hiredate , basewage whose name ends with 8 and who was hired after June 10, 2010. (Hint: read pattern matching in Mysql)

SELECT employeename,hiredate,basewage
FROM Employee
WHERE employeename LIKE "%8" && hiredate>"2010-06-10";

#6 Write a query to return the employeename and corresponding departmentid
whose total wage is larger than 7000.

SELECT employeename,departmentid
FROM Employee
WHERE basewage*wagelevel>7000;


#7 Write a query to return the departmentid of departments that have at least 2 employees with basewage >= 3000.

SELECT departmentid
FROM Employee
WHERE basewage>=3000
GROUP BY departmentid
HAVING COUNT(*)>=2;

#8 Write a query to return the average total wage in each department. Sort the results by average wage in ascending order.

SELECT departmentid,AVG(basewage*wagelevel)
FROM Employee
GROUP BY departmentid 
ORDER BY AVG(basewage*wagelevel);

#9 Write a query to return the average total wage of males and females in each department. Sort the results by DepartmentID in descending order.

SELECT EmployeeSex, DepartmentID,AVG(basewage*wagelevel)
FROM Employee
GROUP BY EmployeeSex,DepartmentID
ORDER BY DepartmentID DESC;

#10. Write a query to return the name of each employee, along with his/her deparmentname and the principal in the department. ( Hint: use JOIN. )

SELECT EmployeeName,DepartmentName,Principal
FROM Employee JOIN Department ON Employee.DepartmentID=Department.DepartmentID; 

Question #3

#1 Download this data set ; the information about attributes is here (item 7). Upload it to the server using scp. Create a table named adult which has the same structure.
Two ways to get the data on server:
a. Download the data directly on our server using curl or wget;
b. Download on your local machine and copy it to server using scp.

curl -O "http://archive.ics.uci.edu/ml/machine-learning-databases/adult/old.adult.names"

CREATE TABLE adult (
Age float,
Workclass char(255),
Fnlwgt float,
Education char(255),
EducationNum float,
MaritalStatus char(255),
Occupation char(255),
Relationship char(255),
Race char(255),
Sex char(255),
CapitalGain float,
CapitalLoss float,
HoursPerWeek float,
NativeCountry char(255),
Class char(255));


# 2. Load the data set adult.data into table adult ( Note : In the original data, separators are ¡°, ¡±[a comma followed with a space], remember to set the value of FIELDS TERMINATED to ¡±, ¡± instead of ¡°,¡± ).


LOAD DATA LOCAL INFILE 'adult.data'
INTO TABLE adult
FIELDS TERMINATED BY ', '
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 lines;

#3. Are there any missing values in the table? How many rows have missing values?
a. For numerical fields, use the ¡® is null ¡¯ condition.
b. For string fields, missing values are represented as ¡°?¡±.


SELECT COUNT(*)
FROM adult
WHERE Age IS NULL OR Workclass ="?" OR Fnlwgt IS NULL OR Education ="?" OR
EducationNum IS NULL OR MaritalStatus ="?" OR Occupation ="?" OR Relationship ="?" OR Race="?" OR Sex="?" OR CapitalGain IS NULL OR CapitalLoss IS NULL OR HoursPerWeek IS NULL OR NativeCountry ="?" OR Class ="?";

#4. Remove the rows having missing values.

DELETE FROM adult
WHERE Age IS NULL OR Workclass ="?" OR Fnlwgt IS NULL OR Education ="?" OR
EducationNum IS NULL OR MaritalStatus ="?" OR Occupation ="?" OR Relationship ="?" OR Race="?" OR Sex="?" OR CapitalGain IS NULL OR CapitalLoss IS NULL OR HoursPerWeek IS NULL OR NativeCountry ="?" OR Class ="?";


#5. What's the ratio of number of '<=50K' / number of '>50K' in column class . ( Hint :Create two ¡°temporary¡± tables.)


SELECT (Table1.Number1 / Table2.Number2) AS Ratio
FROM (SELECT COUNT(*) AS Number1 FROM adult WHERE Class="<=50K") AS Table1,
(SELECT COUNT(*) AS Number2 FROM adult WHERE Class=">50K") AS Table2;


#6. Compute the average age in each class .

SELECT Class,AVG(Age)
FROM adult
GROUP BY Class;

#7. How many rows in class ¡®>50K' where the age is less than 36.78?

SELECT COUNT(*)
FROM adult
WHERE Class=">50K" && Age < 36.78;

8. What's the average hours-per-week in each class ?

SELECT Class,AVG(HoursPerWeek)
FROM adult
GROUP BY Class;


9. What's the ratio of number of '<=50K' / number of '>50K' in Female and Male(column sex )? ( Hint : Create two ¡°temporary¡± tables.)

SELECT Table1.Sex, SmallerThan/LargerThan AS Ratio
FROM (SELECT COUNT(*) AS SmallerThan,Sex FROM adult WHERE Class="<=50K" GROUP BY Sex) AS Table1
LEFT JOIN (SELECT COUNT(*) AS LargerThan ,Sex FROM adult WHERE Class=">50K" GROUP BY Sex) AS Table2
ON Table1.Sex=Table2.Sex;





