Question #1:
1. Create a directory named test and make test a git repository.

mkdir test
cd test
git init

2. Create a file named a.txt with the content ¡°Git is good¡± under test and add a .txt to the staging area.

touch a.txt
echo "Git is good" > a.txt
git add a.txt

3. Run the command git status and check the output.

git status

4. Now commit your changes and check the output of git status .

git commit -m
git status

Question #2:
1. Create a new directory named subtest under test repo and add a file b.txt into it, the content can be anything.

mkdir subtest
cd subtest
touch b.txt
echo "Hello,world" > b.txt

2. Add some more files, for example a1.txt, a2.txt, to test repo and then add all of them to the staging area.

cd ..
touch a1.txt, a2.txt
git add --all

3. Run git status to make sure you have everything in the staging area and then commit them.

git status

4. Display all the commits we¡¯ve done so far.




Question #3:
1. Create a new repository with the name test on your Github account and follow the instruction on Github to link the remote repository with the local one you just created in question 1a. instruction link: https://help.github.com/articles/adding-a-remote/

git remote add origin https://github.com/Joshuacourse/test.git
git remote -v

2. Add a new line ¡°Github is awesome¡± to the file a.txt under the local repo test and then add the change to the staging area.

echo "Github is awesome" > a.txt
git add a.txt


3. Now a.txt has two versions. Use diff to show the difference between the old version that we just committed and the new one in the staging area.

git diff HEAD -- a.txt

4. Commit the changes and push it to the remote repo.

git commit -m


Question #4:
1. Read this following question on Stack Overflow and finish the following two questions using the commands mentioned above.
http://stackoverflow.com/q/3639342/4705931

git reset: Reset the files you just added, out of the staging area.
git checkout:Restore the file to the workspace, so you can undo accidental, non-commited changes.

2. Edit a1.txt and add  it to the staging area and then try to undo the changes.

echo "Data Science Academy" > a1.txt
git add a1.txt
git reset HEAD a1.txt
git checkout -- a1.txt

3. Edit the file a1.txt and commit it to the repository and then try to undo the changes you just committed.

echo "Big Data" > a1.txt
git commit -m
git reset HEAD a1.txt
git checkout -- a1.txt
